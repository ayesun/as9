def func1(arg1, arg2):
    def func2(arg3, arg4):
        var9 = func3(arg2, arg4)
        var10 = func6()
        var11 = arg4 + 425
        var12 = (var9 ^ var10 + var11) ^ -536 + var9
        result = ((var12 | var12) ^ (var12 - (var11 + arg1 + var12))) - var9 ^ arg3
        return result
    var13 = func2(arg2, arg1)
    var42 = var16(arg1, arg2)
    if arg1 < arg2:
        var43 = var13 - -1840717144
    else:
        var43 = var42 & (299318085 & var13 - (var13 | var42) - arg2)
    var44 = 89 - var13
    var45 = var44 & 610868332
    result = var45 | var45 & var13
    return result
def func9(arg17, arg18):
    var23 = func10(arg18, arg17)
    var24 = arg18 | (793088363 & arg18) - 1485982
    var25 = ((var24 | arg17) | var24) - arg17
    var26 = 998 & arg17
    var27 = ((arg18 & -268) | 994) - var26
    if var23 < var26:
        var28 = arg17 - ((var23 ^ var26) | var26)
    else:
        var28 = (var25 - var23) + (var25 - var23)
    var29 = (1568379587 ^ -364868554 - var24) + arg17
    var30 = (1096070721 & arg18) ^ var24 | var27
    var31 = var27 | arg17
    var32 = var24 | var31
    if arg17 < var29:
        var33 = arg17 & var24
    else:
        var33 = var23 - var30
    var34 = 1439728878 ^ arg18 - arg18
    var35 = var25 & var27 + var24 - var26
    var36 = (-209 | var24) - var29
    var37 = (var35 ^ (arg17 - 2138288148)) & var27
    var38 = var32 - var34 + var29
    var39 = var29 ^ var37
    var40 = 856 ^ var30 | var31 | var34
    var41 = var36 - (var23 - var32)
    result = arg17 + (var30 - var39 & (-252 ^ (var30 ^ var39 ^ (var41 | var24 | var26 + 812 + var41))) + var39)
    return result
def func10(arg19, arg20):
    var21 = 0
    for var22 in range(5):
        var21 += arg20 | arg19 + -2
    return var21
def func8():
    closure = [-7]
    def func7(arg14, arg15):
        closure[0] += func9(arg14, arg15)
        return closure[0]
    func = func7
    return func
var16 = func8()
def func6():
    func4()
    result = len(range(18))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : -4
def func3(arg5, arg6):
    var7 = 0
    for var8 in xrange(5):
        if arg6 < arg5:
            var7 += (var7 | var8) & var8
        else:
            var7 += arg6 - -7 & -1
    return var7
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var9 = func3(arg2, arg4)
        var10 = func6()
        var11 = arg4 + 425
        var12 = (var9 ^ var10 + var11) ^ -536 + var9
        result = ((var12 | var12) ^ (var12 - (var11 + arg1 + var12))) - var9 ^ arg3
        return result
    var13 = func2(arg2, arg1)
    var42 = var16(arg1, arg2)
    if arg1 < arg2:
        var43 = var13 - -1840717144
    else:
        var43 = var42 & (299318085 & var13 - (var13 | var42) - arg2)
    var44 = 89 - var13
    var45 = var44 & 610868332
    result = var45 | var45 & var13
    return result
def func9(arg17, arg18):
    var23 = func10(arg18, arg17)
    var24 = arg18 | (793088363 & arg18) - 1485982
    var25 = ((var24 | arg17) | var24) - arg17
    var26 = 998 & arg17
    var27 = ((arg18 & -268) | 994) - var26
    if var23 < var26:
        var28 = arg17 - ((var23 ^ var26) | var26)
    else:
        var28 = (var25 - var23) + (var25 - var23)
    var29 = (1568379587 ^ -364868554 - var24) + arg17
    var30 = (1096070721 & arg18) ^ var24 | var27
    var31 = var27 | arg17
    var32 = var24 | var31
    if arg17 < var29:
        var33 = arg17 & var24
    else:
        var33 = var23 - var30
    var34 = 1439728878 ^ arg18 - arg18
    var35 = var25 & var27 + var24 - var26
    var36 = (-209 | var24) - var29
    var37 = (var35 ^ (arg17 - 2138288148)) & var27
    var38 = var32 - var34 + var29
    var39 = var29 ^ var37
    var40 = 856 ^ var30 | var31 | var34
    var41 = var36 - (var23 - var32)
    result = arg17 + (var30 - var39 & (-252 ^ (var30 ^ var39 ^ (var41 | var24 | var26 + 812 + var41))) + var39)
    return result
def func10(arg19, arg20):
    var21 = 0
    for var22 in range(5):
        var21 += arg20 | arg19 + -2
    return var21
def func8():
    closure = [-7]
    def func7(arg14, arg15):
        closure[0] += func9(arg14, arg15)
        return closure[0]
    func = func7
    return func
var16 = func8()
def func6():
    func4()
    result = len(range(18))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : -4
def func3(arg5, arg6):
    var7 = 0
    for var8 in xrange(5):
        if arg6 < arg5:
            var7 += (var7 | var8) & var8
        else:
            var7 += arg6 - -7 & -1
    return var7
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var9 = func3(arg2, arg4)
        var10 = func6()
        var11 = arg4 + 425
        var12 = (var9 ^ var10 + var11) ^ -536 + var9
        result = ((var12 | var12) ^ (var12 - (var11 + arg1 + var12))) - var9 ^ arg3
        return result
    var13 = func2(arg2, arg1)
    var42 = var16(arg1, arg2)
    if arg1 < arg2:
        var43 = var13 - -1840717144
    else:
        var43 = var42 & (299318085 & var13 - (var13 | var42) - arg2)
    var44 = 89 - var13
    var45 = var44 & 610868332
    result = var45 | var45 & var13
    return result
def func9(arg17, arg18):
    var23 = func10(arg18, arg17)
    var24 = arg18 | (793088363 & arg18) - 1485982
    var25 = ((var24 | arg17) | var24) - arg17
    var26 = 998 & arg17
    var27 = ((arg18 & -268) | 994) - var26
    if var23 < var26:
        var28 = arg17 - ((var23 ^ var26) | var26)
    else:
        var28 = (var25 - var23) + (var25 - var23)
    var29 = (1568379587 ^ -364868554 - var24) + arg17
    var30 = (1096070721 & arg18) ^ var24 | var27
    var31 = var27 | arg17
    var32 = var24 | var31
    if arg17 < var29:
        var33 = arg17 & var24
    else:
        var33 = var23 - var30
    var34 = 1439728878 ^ arg18 - arg18
    var35 = var25 & var27 + var24 - var26
    var36 = (-209 | var24) - var29
    var37 = (var35 ^ (arg17 - 2138288148)) & var27
    var38 = var32 - var34 + var29
    var39 = var29 ^ var37
    var40 = 856 ^ var30 | var31 | var34
    var41 = var36 - (var23 - var32)
    result = arg17 + (var30 - var39 & (-252 ^ (var30 ^ var39 ^ (var41 | var24 | var26 + 812 + var41))) + var39)
    return result
def func10(arg19, arg20):
    var21 = 0
    for var22 in range(5):
        var21 += arg20 | arg19 + -2
    return var21
def func8():
    closure = [-7]
    def func7(arg14, arg15):
        closure[0] += func9(arg14, arg15)
        return closure[0]
    func = func7
    return func
var16 = func8()
def func6():
    func4()
    result = len(range(18))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : -4
def func3(arg5, arg6):
    var7 = 0
    for var8 in xrange(5):
        if arg6 < arg5:
            var7 += (var7 | var8) & var8
        else:
            var7 += arg6 - -7 & -1
    return var7
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var9 = func3(arg2, arg4)
        var10 = func6()
        var11 = arg4 + 425
        var12 = (var9 ^ var10 + var11) ^ -536 + var9
        result = ((var12 | var12) ^ (var12 - (var11 + arg1 + var12))) - var9 ^ arg3
        return result
    var13 = func2(arg2, arg1)
    var42 = var16(arg1, arg2)
    if arg1 < arg2:
        var43 = var13 - -1840717144
    else:
        var43 = var42 & (299318085 & var13 - (var13 | var42) - arg2)
    var44 = 89 - var13
    var45 = var44 & 610868332
    result = var45 | var45 & var13
    return result
def func9(arg17, arg18):
    var23 = func10(arg18, arg17)
    var24 = arg18 | (793088363 & arg18) - 1485982
    var25 = ((var24 | arg17) | var24) - arg17
    var26 = 998 & arg17
    var27 = ((arg18 & -268) | 994) - var26
    if var23 < var26:
        var28 = arg17 - ((var23 ^ var26) | var26)
    else:
        var28 = (var25 - var23) + (var25 - var23)
    var29 = (1568379587 ^ -364868554 - var24) + arg17
    var30 = (1096070721 & arg18) ^ var24 | var27
    var31 = var27 | arg17
    var32 = var24 | var31
    if arg17 < var29:
        var33 = arg17 & var24
    else:
        var33 = var23 - var30
    var34 = 1439728878 ^ arg18 - arg18
    var35 = var25 & var27 + var24 - var26
    var36 = (-209 | var24) - var29
    var37 = (var35 ^ (arg17 - 2138288148)) & var27
    var38 = var32 - var34 + var29
    var39 = var29 ^ var37
    var40 = 856 ^ var30 | var31 | var34
    var41 = var36 - (var23 - var32)
    result = arg17 + (var30 - var39 & (-252 ^ (var30 ^ var39 ^ (var41 | var24 | var26 + 812 + var41))) + var39)
    return result
def func10(arg19, arg20):
    var21 = 0
    for var22 in range(5):
        var21 += arg20 | arg19 + -2
    return var21
def func8():
    closure = [-7]
    def func7(arg14, arg15):
        closure[0] += func9(arg14, arg15)
        return closure[0]
    func = func7
    return func
var16 = func8()
def func6():
    func4()
    result = len(range(18))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : -4
def func3(arg5, arg6):
    var7 = 0
    for var8 in xrange(5):
        if arg6 < arg5:
            var7 += (var7 | var8) & var8
        else:
            var7 += arg6 - -7 & -1
    return var7
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var9 = func3(arg2, arg4)
        var10 = func6()
        var11 = arg4 + 425
        var12 = (var9 ^ var10 + var11) ^ -536 + var9
        result = ((var12 | var12) ^ (var12 - (var11 + arg1 + var12))) - var9 ^ arg3
        return result
    var13 = func2(arg2, arg1)
    var42 = var16(arg1, arg2)
    if arg1 < arg2:
        var43 = var13 - -1840717144
    else:
        var43 = var42 & (299318085 & var13 - (var13 | var42) - arg2)
    var44 = 89 - var13
    var45 = var44 & 610868332
    result = var45 | var45 & var13
    return result
def func9(arg17, arg18):
    var23 = func10(arg18, arg17)
    var24 = arg18 | (793088363 & arg18) - 1485982
    var25 = ((var24 | arg17) | var24) - arg17
    var26 = 998 & arg17
    var27 = ((arg18 & -268) | 994) - var26
    if var23 < var26:
        var28 = arg17 - ((var23 ^ var26) | var26)
    else:
        var28 = (var25 - var23) + (var25 - var23)
    var29 = (1568379587 ^ -364868554 - var24) + arg17
    var30 = (1096070721 & arg18) ^ var24 | var27
    var31 = var27 | arg17
    var32 = var24 | var31
    if arg17 < var29:
        var33 = arg17 & var24
    else:
        var33 = var23 - var30
    var34 = 1439728878 ^ arg18 - arg18
    var35 = var25 & var27 + var24 - var26
    var36 = (-209 | var24) - var29
    var37 = (var35 ^ (arg17 - 2138288148)) & var27
    var38 = var32 - var34 + var29
    var39 = var29 ^ var37
    var40 = 856 ^ var30 | var31 | var34
    var41 = var36 - (var23 - var32)
    result = arg17 + (var30 - var39 & (-252 ^ (var30 ^ var39 ^ (var41 | var24 | var26 + 812 + var41))) + var39)
    return result
def func10(arg19, arg20):
    var21 = 0
    for var22 in range(5):
        var21 += arg20 | arg19 + -2
    return var21
def func8():
    closure = [-7]
    def func7(arg14, arg15):
        closure[0] += func9(arg14, arg15)
        return closure[0]
    func = func7
    return func
var16 = func8()
def func6():
    func4()
    result = len(range(18))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : -4
def func3(arg5, arg6):
    var7 = 0
    for var8 in xrange(5):
        if arg6 < arg5:
            var7 += (var7 | var8) & var8
        else:
            var7 += arg6 - -7 & -1
    return var7
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var9 = func3(arg2, arg4)
        var10 = func6()
        var11 = arg4 + 425
        var12 = (var9 ^ var10 + var11) ^ -536 + var9
        result = ((var12 | var12) ^ (var12 - (var11 + arg1 + var12))) - var9 ^ arg3
        return result
    var13 = func2(arg2, arg1)
    var42 = var16(arg1, arg2)
    if arg1 < arg2:
        var43 = var13 - -1840717144
    else:
        var43 = var42 & (299318085 & var13 - (var13 | var42) - arg2)
    var44 = 89 - var13
    var45 = var44 & 610868332
    result = var45 | var45 & var13
    return result
def func9(arg17, arg18):
    var23 = func10(arg18, arg17)
    var24 = arg18 | (793088363 & arg18) - 1485982
    var25 = ((var24 | arg17) | var24) - arg17
    var26 = 998 & arg17
    var27 = ((arg18 & -268) | 994) - var26
    if var23 < var26:
        var28 = arg17 - ((var23 ^ var26) | var26)
    else:
        var28 = (var25 - var23) + (var25 - var23)
    var29 = (1568379587 ^ -364868554 - var24) + arg17
    var30 = (1096070721 & arg18) ^ var24 | var27
    var31 = var27 | arg17
    var32 = var24 | var31
    if arg17 < var29:
        var33 = arg17 & var24
    else:
        var33 = var23 - var30
    var34 = 1439728878 ^ arg18 - arg18
    var35 = var25 & var27 + var24 - var26
    var36 = (-209 | var24) - var29
    var37 = (var35 ^ (arg17 - 2138288148)) & var27
    var38 = var32 - var34 + var29
    var39 = var29 ^ var37
    var40 = 856 ^ var30 | var31 | var34
    var41 = var36 - (var23 - var32)
    result = arg17 + (var30 - var39 & (-252 ^ (var30 ^ var39 ^ (var41 | var24 | var26 + 812 + var41))) + var39)
    return result
def func10(arg19, arg20):
    var21 = 0
    for var22 in range(5):
        var21 += arg20 | arg19 + -2
    return var21
def func8():
    closure = [-7]
    def func7(arg14, arg15):
        closure[0] += func9(arg14, arg15)
        return closure[0]
    func = func7
    return func
var16 = func8()
def func6():
    func4()
    result = len(range(18))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : -4
def func3(arg5, arg6):
    var7 = 0
    for var8 in xrange(5):
        if arg6 < arg5:
            var7 += (var7 | var8) & var8
        else:
            var7 += arg6 - -7 & -1
    return var7
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var9 = func3(arg2, arg4)
        var10 = func6()
        var11 = arg4 + 425
        var12 = (var9 ^ var10 + var11) ^ -536 + var9
        result = ((var12 | var12) ^ (var12 - (var11 + arg1 + var12))) - var9 ^ arg3
        return result
    var13 = func2(arg2, arg1)
    var42 = var16(arg1, arg2)
    if arg1 < arg2:
        var43 = var13 - -1840717144
    else:
        var43 = var42 & (299318085 & var13 - (var13 | var42) - arg2)
    var44 = 89 - var13
    var45 = var44 & 610868332
    result = var45 | var45 & var13
    return result
def func9(arg17, arg18):
    var23 = func10(arg18, arg17)
    var24 = arg18 | (793088363 & arg18) - 1485982
    var25 = ((var24 | arg17) | var24) - arg17
    var26 = 998 & arg17
    var27 = ((arg18 & -268) | 994) - var26
    if var23 < var26:
        var28 = arg17 - ((var23 ^ var26) | var26)
    else:
        var28 = (var25 - var23) + (var25 - var23)
    var29 = (1568379587 ^ -364868554 - var24) + arg17
    var30 = (1096070721 & arg18) ^ var24 | var27
    var31 = var27 | arg17
    var32 = var24 | var31
    if arg17 < var29:
        var33 = arg17 & var24
    else:
        var33 = var23 - var30
    var34 = 1439728878 ^ arg18 - arg18
    var35 = var25 & var27 + var24 - var26
    var36 = (-209 | var24) - var29
    var37 = (var35 ^ (arg17 - 2138288148)) & var27
    var38 = var32 - var34 + var29
    var39 = var29 ^ var37
    var40 = 856 ^ var30 | var31 | var34
    var41 = var36 - (var23 - var32)
    result = arg17 + (var30 - var39 & (-252 ^ (var30 ^ var39 ^ (var41 | var24 | var26 + 812 + var41))) + var39)
    return result
def func10(arg19, arg20):
    var21 = 0
    for var22 in range(5):
        var21 += arg20 | arg19 + -2
    return var21
def func8():
    closure = [-7]
    def func7(arg14, arg15):
        closure[0] += func9(arg14, arg15)
        return closure[0]
    func = func7
    return func
var16 = func8()
def func6():
    func4()
    result = len(range(18))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : -4
def func3(arg5, arg6):
    var7 = 0
    for var8 in xrange(5):
        if arg6 < arg5:
            var7 += (var7 | var8) & var8
        else:
            var7 += arg6 - -7 & -1
    return var7
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var9 = func3(arg2, arg4)
        var10 = func6()
        var11 = arg4 + 425
        var12 = (var9 ^ var10 + var11) ^ -536 + var9
        result = ((var12 | var12) ^ (var12 - (var11 + arg1 + var12))) - var9 ^ arg3
        return result
    var13 = func2(arg2, arg1)
    var42 = var16(arg1, arg2)
    if arg1 < arg2:
        var43 = var13 - -1840717144
    else:
        var43 = var42 & (299318085 & var13 - (var13 | var42) - arg2)
    var44 = 89 - var13
    var45 = var44 & 610868332
    result = var45 | var45 & var13
    return result
def func9(arg17, arg18):
    var23 = func10(arg18, arg17)
    var24 = arg18 | (793088363 & arg18) - 1485982
    var25 = ((var24 | arg17) | var24) - arg17
    var26 = 998 & arg17
    var27 = ((arg18 & -268) | 994) - var26
    if var23 < var26:
        var28 = arg17 - ((var23 ^ var26) | var26)
    else:
        var28 = (var25 - var23) + (var25 - var23)
    var29 = (1568379587 ^ -364868554 - var24) + arg17
    var30 = (1096070721 & arg18) ^ var24 | var27
    var31 = var27 | arg17
    var32 = var24 | var31
    if arg17 < var29:
        var33 = arg17 & var24
    else:
        var33 = var23 - var30
    var34 = 1439728878 ^ arg18 - arg18
    var35 = var25 & var27 + var24 - var26
    var36 = (-209 | var24) - var29
    var37 = (var35 ^ (arg17 - 2138288148)) & var27
    var38 = var32 - var34 + var29
    var39 = var29 ^ var37
    var40 = 856 ^ var30 | var31 | var34
    var41 = var36 - (var23 - var32)
    result = arg17 + (var30 - var39 & (-252 ^ (var30 ^ var39 ^ (var41 | var24 | var26 + 812 + var41))) + var39)
    return result
def func10(arg19, arg20):
    var21 = 0
    for var22 in range(5):
        var21 += arg20 | arg19 + -2
    return var21
def func8():
    closure = [-7]
    def func7(arg14, arg15):
        closure[0] += func9(arg14, arg15)
        return closure[0]
    func = func7
    return func
var16 = func8()
def func6():
    func4()
    result = len(range(18))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : -4
def func3(arg5, arg6):
    var7 = 0
    for var8 in xrange(5):
        if arg6 < arg5:
            var7 += (var7 | var8) & var8
        else:
            var7 += arg6 - -7 & -1
    return var7
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    def func2(arg3, arg4):
        var9 = func3(arg2, arg4)
        var10 = func6()
        var11 = arg4 + 425
        var12 = (var9 ^ var10 + var11) ^ -536 + var9
        result = ((var12 | var12) ^ (var12 - (var11 + arg1 + var12))) - var9 ^ arg3
        return result
    var13 = func2(arg2, arg1)
    var42 = var16(arg1, arg2)
    if arg1 < arg2:
        var43 = var13 - -1840717144
    else:
        var43 = var42 & (299318085 & var13 - (var13 | var42) - arg2)
    var44 = 89 - var13
    var45 = var44 & 610868332
    result = var45 | var45 & var13
    return result
def func9(arg17, arg18):
    var23 = func10(arg18, arg17)
    var24 = arg18 | (793088363 & arg18) - 1485982
    var25 = ((var24 | arg17) | var24) - arg17
    var26 = 998 & arg17
    var27 = ((arg18 & -268) | 994) - var26
    if var23 < var26:
        var28 = arg17 - ((var23 ^ var26) | var26)
    else:
        var28 = (var25 - var23) + (var25 - var23)
    var29 = (1568379587 ^ -364868554 - var24) + arg17
    var30 = (1096070721 & arg18) ^ var24 | var27
    var31 = var27 | arg17
    var32 = var24 | var31
    if arg17 < var29:
        var33 = arg17 & var24
    else:
        var33 = var23 - var30
    var34 = 1439728878 ^ arg18 - arg18
    var35 = var25 & var27 + var24 - var26
    var36 = (-209 | var24) - var29
    var37 = (var35 ^ (arg17 - 2138288148)) & var27
    var38 = var32 - var34 + var29
    var39 = var29 ^ var37
    var40 = 856 ^ var30 | var31 | var34
    var41 = var36 - (var23 - var32)
    result = arg17 + (var30 - var39 & (-252 ^ (var30 ^ var39 ^ (var41 | var24 | var26 + 812 + var41))) + var39)
    return result
def func10(arg19, arg20):
    var21 = 0
    for var22 in range(5):
        var21 += arg20 | arg19 + -2
    return var21
def func8():
    closure = [-7]
    def func7(arg14, arg15):
        closure[0] += func9(arg14, arg15)
        return closure[0]
    func = func7
    return func
var16 = func8()
def func6():
    func4()
    result = len(range(18))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : -4
def func3(arg5, arg6):
    var7 = 0
    for var8 in xrange(5):
        if arg6 < arg5:
            var7 += (var7 | var8) & var8
        else:
            var7 += arg6 - -7 & -1
    return var7
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 11'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
